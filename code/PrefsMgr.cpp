/******************************************************************************
 PrefsMgr.cpp

	BASE CLASS = public JXPrefsManager

	Copyright (C) 1998 by Glenn W. Bach.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include "PrefsMgr.h"
#include "EditPrefsDialog.h"
#include "ViewManPageDialog.h"
#include "FileVersions.h"
#include "globals.h"
#include <jx-af/jx/JXChooseSaveFile.h>
#include <jx-af/jcore/jDirUtil.h>
#include <jx-af/jcore/jAssert.h>

// JBroadcaster messages

const JUtf8Byte* PrefsMgr::kPrefsChanged = "PrefsChanged::PrefsMgr";

/******************************************************************************
 Constructor

 *****************************************************************************/

PrefsMgr::PrefsMgr
	(
	bool* isNew
	)
	:
	JXPrefsManager(kCurrentPrefsFileVersion, true)
{
	itsDialog = nullptr;
	*isNew    = JPrefsManager::UpgradeData();

	JXChooseSaveFile* csf = JXGetChooseSaveFile();
	csf->SetPrefInfo(this, kSgCSFSetupID);
	csf->JPrefObject::ReadPrefs();
}

/******************************************************************************
 Destructor

 *****************************************************************************/

PrefsMgr::~PrefsMgr()
{
	SaveAllBeforeDestruct();
}

/******************************************************************************
 SaveAllBeforeDestruct (virtual protected)

 ******************************************************************************/

void
PrefsMgr::SaveAllBeforeDestruct()
{
	SetData(kSProgramVersionID, GetVersionNumberStr());

	JXPrefsManager::SaveAllBeforeDestruct();
}

/******************************************************************************
 GetSystemGVersionStr

 ******************************************************************************/

JString
PrefsMgr::GetSystemGVersionStr()
	const
{
	std::string data;
	if (GetData(kSProgramVersionID, &data))
	{
		return JString(data);
	}
	else
	{
		return JString("< 0.4.0");		// didn't exist before this version
	}
}

/******************************************************************************
 UpgradeData (virtual protected)

 ******************************************************************************/

void
PrefsMgr::UpgradeData
	(
	const bool		isNew,
	const JFileVersion	currentVersion
	)
{
	if (isNew)
	{
		const bool prefs[kTreePrefCount] =
		{false,false,false,false,false,false,false};
		SetTreePreferences(prefs);
		SaveFilterStatePref(false);
	}

	if (currentVersion < 5)
	{
		std::string data;
		if (GetData(3, &data))
		{
			std::ostringstream newData;
			newData << 0 << ' ' << data.c_str();
			SetData(3, newData);
		}
	}

	if (currentVersion < 6)
	{
		RemoveData(13);
		RemoveData(14);
		RemoveData(15);
		RemoveData(20);

		DelShouldDelete(false);
	}

	if (currentVersion < 7)
	{
		RemoveData(6);
		RemoveData(8);
		RemoveData(9);
		RemoveData(16);
		RemoveData(17);
	}

	if (currentVersion < 8)
	{
		JString cmd;
		std::string data;
		if (GetData(11, &data))
		{
			std::istringstream input(data);
			input >> cmd;
			(GetApplication())->SetTerminalCommand(cmd);
			RemoveData(11);
		}
		if (GetData(12, &data))
		{
			std::istringstream input(data);
			input >> cmd;
			ViewManPageDialog::SetViewManPageCommand(cmd);
			RemoveData(12);
		}
	}

	if (currentVersion < 10)
	{
		ShouldOpenNewWindows(true);
	}

	if (currentVersion < 11)
	{
		ShouldSaveFolderPrefs(true);
	}
}

/******************************************************************************
 Receive (virtual protected)

 ******************************************************************************/

void
PrefsMgr::Receive
	(
	JBroadcaster*	sender,
	const Message&	message
	)
{
	if (sender == itsDialog && message.Is(JXDialogDirector::kDeactivated))
	{
		const auto* info =
			dynamic_cast<const JXDialogDirector::Deactivated*>(&message);
		assert(info != nullptr);
		if (info->Successful())
		{
			UpdatePrefs();
		}
		itsDialog = nullptr;
	}
	else
	{
		JXPrefsManager::Receive(sender, message);
	}
}

/******************************************************************************
 EditPrefs

 ******************************************************************************/

void
PrefsMgr::EditPrefs()
{
	assert( itsDialog == nullptr );

	const JString manCmd        = (GetManPageDialog())->GetViewManPageCommand();
	const JString termCmd       = (GetApplication())->GetTerminalCommand();
	const JString gitStatusCmd  = (GetApplication())->GetGitStatusCommand();
	const JString gitHistoryCmd = (GetApplication())->GetGitHistoryCommand();
	const JString coCmd         = (GetApplication())->GetPostCheckoutCommand();

	itsDialog = jnew EditPrefsDialog(termCmd, manCmd, gitStatusCmd, gitHistoryCmd,
									   coCmd, DelWillDelete(), WillOpenNewWindows(),
									   WillSaveFolderPrefs());
	assert(itsDialog != nullptr);

	itsDialog->BeginDialog();
	ListenTo(itsDialog);
}

/******************************************************************************
 UpdatePrefs

 ******************************************************************************/

void
PrefsMgr::UpdatePrefs()
{
	assert( itsDialog != nullptr );

	JString manCmd, termCmd, gitStatusCmd, gitHistoryCmd, postCheckoutCmd;
	bool del, newWindows, perFolderPrefs;
	itsDialog->GetPrefs(&termCmd, &manCmd, &gitStatusCmd, &gitHistoryCmd,
						&postCheckoutCmd, &del, &newWindows, &perFolderPrefs);

	(GetApplication())->SetTerminalCommand(termCmd);
	(GetApplication())->SetGitStatusCommand(gitStatusCmd);
	(GetApplication())->SetGitHistoryCommand(gitHistoryCmd);
	(GetApplication())->SetPostCheckoutCommand(postCheckoutCmd);
	(GetManPageDialog())->SetViewManPageCommand(manCmd);
	DelShouldDelete(del);
	ShouldOpenNewWindows(newWindows);
	ShouldSaveFolderPrefs(perFolderPrefs);

	Broadcast(PrefsChanged());
}

/******************************************************************************
 TreePreferences

 ******************************************************************************/

void
PrefsMgr::SetTreePreferences
	(
	const bool prefs[]
	)
{
	std::ostringstream data;
	for (JIndex i = 0; i < kTreePrefCount; i++)
	{
		data << JBoolToString(prefs[i]);
	}

	SetData(kSTreeOptionsID, data);
}

void
PrefsMgr::GetTreePreferences
	(
	bool prefs[]
	)
	const
{
	std::string data;
	const bool ok = GetData(kSTreeOptionsID, &data);
	assert( ok );

	std::istringstream dataStream(data);
	for (JIndex i = 0; i < kTreePrefCount; i++)
	{
		dataStream >> JBoolFromString(prefs[i]);
	}
}

/******************************************************************************
 DefaultWindowSize

 ******************************************************************************/

bool
PrefsMgr::GetDefaultWindowSize
	(
	JSize* w,
	JSize* h
	)
	const
{
	std::string data;
	if (GetData(kSDefaultWindowSizeID, &data))
	{
		std::istringstream dataStream(data);
		dataStream >> *w;
		dataStream >> *h;
		return true;
	}
	else
	{
		return false;
	}
}

void
PrefsMgr::SaveDefaultWindowSize
	(
	const JSize w,
	const JSize h
	)
{
	std::ostringstream data;
	data << w << ' ' << h;
	SetData(kSDefaultWindowSizeID, data);
}

/******************************************************************************
 FilterStatePref

 ******************************************************************************/

void
PrefsMgr::SaveFilterStatePref
	(
	const bool show
	)
{
	std::ostringstream data;
	data << JBoolToString(show);
	SetData(kSFilterVisibleID, data);
}

bool
PrefsMgr::GetFilterStatePref()
	const
{
	bool show = false;
	if (IDValid(kSFilterVisibleID))
	{
		std::string data;
		GetData(kSFilterVisibleID, &data);
		std::istringstream dataStream(data);
		dataStream >> JBoolFromString(show);
	}
	return show;
}

/******************************************************************************
 Program State

 ******************************************************************************/

bool
PrefsMgr::RestoreProgramState
	(
	JPtrArray<JString>* children
	)
{
	if (IDValid(kSChildWindowListID))
	{
		std::string data;
		GetData(kSChildWindowListID, &data);
		std::istringstream dataStream(data);
		dataStream >> *children;

		RemoveData(kSChildWindowListID);
		return true;
	}
	else
	{
		return false;
	}
}

void
PrefsMgr::SaveProgramState
	(
	const JPtrArray<JString>& children
	)
{
	std::ostringstream data;
	data << children;
	SetData(kSChildWindowListID, data);
}

/******************************************************************************
 Delete key should delete files

 ******************************************************************************/

bool
PrefsMgr::DelWillDelete()
	const
{
	std::string data;
	GetData(kSDelDeleteID, &data);
	std::istringstream dataStream(data);
	bool del;
	dataStream >> JBoolFromString(del);
	return del;
}

void
PrefsMgr::DelShouldDelete
	(
	const bool del
	)
{
	std::ostringstream data;
	data << JBoolToString(del);
	SetData(kSDelDeleteID, data);
}

/******************************************************************************
 Open new windows

 ******************************************************************************/

bool
PrefsMgr::WillOpenNewWindows()
	const
{
	std::string data;
	GetData(kSNewWindowsID, &data);
	std::istringstream dataStream(data);
	bool newWindows;
	dataStream >> JBoolFromString(newWindows);
	return newWindows;
}

void
PrefsMgr::ShouldOpenNewWindows
	(
	const bool newWindows
	)
{
	std::ostringstream data;
	data << JBoolToString(newWindows);
	SetData(kSNewWindowsID, data);
}

/******************************************************************************
 Per folder prefs

 ******************************************************************************/

bool
PrefsMgr::WillSaveFolderPrefs()
	const
{
	std::string data;
	GetData(kSPerFolderPrefsID, &data);
	std::istringstream dataStream(data);
	bool perFolder;
	dataStream >> JBoolFromString(perFolder);
	return perFolder;
}

void
PrefsMgr::ShouldSaveFolderPrefs
	(
	const bool perFolder
	)
{
	std::ostringstream data;
	data << JBoolToString(perFolder);
	SetData(kSPerFolderPrefsID, data);
}
